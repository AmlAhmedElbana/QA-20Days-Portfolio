{
	"info": {
		"_postman_id": "1af163a9-ca53-4f02-8779-24488bad3815",
		"name": "Day12_Data Driven",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45296635",
		"_collection_link": "https://amlahmed-6282774.postman.co/workspace/20Days_QA_Bootcamp~9bf0b6fa-f675-4fc9-a3ab-0da50f350414/collection/45296635-1af163a9-ca53-4f02-8779-24488bad3815?action=share&source=collection_link&creator=45296635"
	},
	"item": [
		{
			"name": "GET All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 2xx\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 800 ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"pm.test(\"Array has 100 objects\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(100);\r",
							"});\r",
							"pm.test(\"First object schema minimal check\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.keys(\"userId\",\"id\",\"title\",\"body\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/posts",
					"host": [
						"{{Url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 2xx\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 800 ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"pm.test(\"userId matches variable\",() => {\r",
							"  pm.expect(pm.response.json().id).to.eql(Number(pm.variables.get(\"userId\")));\r",
							"});\r",
							"pm.test(\"Email has @\",() => {\r",
							"   pm.expect(pm.response.json().email).to.include(\"@\");\r",
							"});\r",
							"const actualId = pm.response.json().id;\r",
							"const expectedId = Number(pm.iterationData.get(\"userId\"));\r",
							"\r",
							"pm.test(\"User ID matches test data\", () => {\r",
							"    pm.expect(actualId).to.eql(expectedId);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/users/{{userId}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET abcdef User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/users/abcdef",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users",
						"abcdef"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST New Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 2xx\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 800 ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"pm.test(\"Response contains sent title\", () => {\r",
							"   pm.expect(pm.response.json().title).to.eql(\"QA demo\");\r",
							"});\r",
							"pm.environment.set(\"newPostId\",pm.response.json().id);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 1,\r\n  \"title\": \"QA demo\",\r\n  \"body\": \"hello world\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/posts",
					"host": [
						"{{Url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Post deleted successfully\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
							"});\r",
							"pm.environment.unset(\"newPostId\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Url}}/users/{{newPostId}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users",
						"{{newPostId}}"
					]
				}
			},
			"response": []
		}
	]
}